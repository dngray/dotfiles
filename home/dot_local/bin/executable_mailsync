#!/bin/sh

# - Syncs mail for all accounts, or a single account given as an argument.
# - Displays a notification showing the number of new mails.
# - Displays a notification for each new mail with its subject displayed.
# - Runs notmuch to index new mail.
# - This script can be set up as a cron job for automated mail syncing.

# There are many arbitrary and ugly features in this script because it is
# inherently difficult to pass environmental variables to cronjobs and other
# issues. It also should at least be compatible with Linux (and maybe BSD) with
# Xorg and MacOS as well.

# Run only if not already running in other instance
pgrep mbsync >/dev/null && { echo "mbsync is already running."; exit ;}

# First, we have to get the right variables for the mbsync file, the pass
# archive, notmuch and the GPG home.  This is done by searching common profile
# files for variable assignments. This is ugly, but there are few options that
# will work on the maximum number of machines.
eval "$(grep -h -- \
	"^\s*\(export \)\?\(MBSYNCRC\|MPOPRC\|PASSWORD_STORE_DIR\|PASSWORD_STORE_GPG_OPTS\|NOTMUCH_CONFIG\|GNUPGHOME\|MAILSYNC_MUTE\|XDG_CONFIG_HOME\|XDG_DATA_HOME\)=" \
	"$HOME/.profile" "$HOME/.bash_profile" "$HOME/.zprofile"  "$HOME/.config/zsh/.zprofile" "$HOME/.zshenv" \
	"$HOME/.config/zsh/.zshenv" "$HOME/.bashrc" "$HOME/.zshrc" "$HOME/.config/zsh/.zshrc" \
	"$HOME/.pam_environment" 2>/dev/null)"

export GPG_TTY="$(tty)"

[ -n "$MBSYNCRC" ] && alias mbsync="mbsync -c $MBSYNCRC" || MBSYNCRC="$HOME/.mbsyncrc"
[ -n "$MPOPRC" ] || MPOPRC="$HOME/.config/mpop/config"

lastrun="${XDG_CONFIG_HOME:-$HOME/.config}/mutt/.mailsynclastrun"

# Settings are different for MacOS (Darwin) systems.
case "$(uname)" in
	Darwin)
		notify() { osascript -e "display notification \"$2 in $1\" with title \"You've got Mail\" subtitle \"Account: $account\"" && sleep 2 ;}
		;;
	*)
		case "$(readlink -f /sbin/init)" in
			*systemd*|*openrc*) export DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$(id -u)/bus ;;
		esac
		# remember if a display server is running since `ps` doesn't always contain a display
		pgrepoutput="$(pgrep -ax X\(\|org\|wayland\))"
		displays="$(echo "$pgrepoutput" | grep -wo "[0-9]*:[0-9]\+" | sort -u)"
		[ -z $displays ] && [ -d /tmp/.X11-unix ] && displays=$(cd /tmp/.X11-unix && for x in X*; do echo ":${x#X}"; done)

		notify() { [ -n "$pgrepoutput" ] && for x in ${displays:-0:}; do
				export DISPLAY=$x
				notify-send --app-name="mutt-wizard" "New mail!" "ðŸ“¬ $2 new mail(s) in \`$1\` account."
			done ;}
		;;
esac

# Check account for new mail. Notify if there is new content.
syncandnotify() {
	acc="$(echo "$account" | sed "s/.*\///")"
	if [ "$1" = "pop" ]; then
		# Handle POP
		mpop "$acc"
	else
		# Handle IMAP
		if [ -z "$opts" ]; then mbsync "$acc"; else mbsync "$opts" "$acc"; fi
	fi
	new=$(find\
		"$HOME/.local/share/mail/$acc/"[Ii][Nn][Bb][Oo][Xx]/new/ \
		"$HOME/.local/share/mail/$acc/"[Ii][Nn][Bb][Oo][Xx]/cur/ \
		-type f -newer "$lastrun" 2> /dev/null)
	newcount=$(echo "$new" | sed '/^\s*$/d' | wc -l)
	[ -z "$MAILSYNC_MUTE" ] && case 1 in
		$((newcount > 0)) ) notify "$acc" "$newcount" ;;
	esac
}

# Sync accounts passed as argument or all.
if [ "$#" -gt "0" ]; then
	for arg in "$@"; do
		[ "${arg%${arg#?}}" = '-' ] && opts="${opts:+${opts} }${arg}" && shift 1
	done
	accounts=$*
fi
[ -z "$imap_accounts" ] && [ -r "$MBSYNCRC" ] && imap_accounts="$(awk '/^Channel/ {print $2}' "$MBSYNCRC" 2>/dev/null)"
[ -z "$pop_accounts" ] && [ -r "$MPOPRC" ] && pop_accounts="$(awk '/^account/ {print $2}' "$MPOPRC" 2>/dev/null)"

# Parallelize multiple accounts
for account in $imap_accounts; do
	if [ -n "$accounts" ]; then
		for tmp_ac in $accounts; do
			[ "$tmp_ac" = "$account" ] && syncandnotify "imap" &
		done
		continue
	fi
	syncandnotify "imap" &
done

for account in $pop_accounts; do
	if [ -n "$accounts" ]; then
		for tmp_ac in $accounts; do
			[ "$tmp_ac" = "$account" ] && syncandnotify "pop" &
		done
		continue
	fi
	syncandnotify "pop" &
done

wait

notmuch new --quiet

#Create a touch file that indicates the time of the last run of mailsync
touch "$lastrun"
