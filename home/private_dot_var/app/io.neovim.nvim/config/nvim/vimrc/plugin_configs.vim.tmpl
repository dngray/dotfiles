" Teach a Vim to fish.. {{ "{{{" }}

if &shell =~# 'fish$'
    set shell=sh
endif " {{ "}}}" }}

" FZF Fuzzy file finder {{ "{{{" }}
let g:fzf_action = {
      \ 'ctrl-s': 'split',
      \ 'ctrl-v': 'vsplit'
      \ }
nnoremap <c-p> :FZF<cr>
augroup fzf
  autocmd!
  autocmd! FileType fzf
  autocmd  FileType fzf set laststatus=0 noshowmode noruler
    \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler
augroup END "{{ "}}}" }}

" Lightline {{ "{{{" }}
" Add diagnostic info for https://github.com/itchyny/lightline.vim
let g:lightline = {
     \ 'colorscheme': 'selenized_dark',
     \ 'active': {
     \   'left': [ [ 'mode', 'paste' ],
     \             [ 'cocstatus', 'readonly', 'filename', 'modified' ] ]
     \ },
     \ 'component_function': {
     \   'cocstatus': 'coc#status'
     \ },
     \ }
" {{ "}}}" }}

" indentLine {{ "{{{" }}
let g:indentLine_enabled = 1
let g:indentLine_char = 'â”‚' " {{ "}}}" }}

" NeoFormat {{ "{{{" }}
" Run formatter on save
"augroup fmt
"  autocmd!
"  autocmd BufWritePre * undojoin | Neoformat
"augroup END " {{ "}}}" }}

" NerdCommenter {{ "{{{" }}
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1 " {{ "}}}" }}

" UltiSnips {{ "{{{" }}
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" Define snippet directory
set rtp+=$XDG_CONFIG_HOME/nvim/otherSnips
let g:UltiSnipsSnippetDirectories=["UltiSnips", "privateSnips"] " {{ "}}}" }}
" let g:UltiSnipsSnippetDirectories=["UltiSnips", "privateSnips", "castelSnips"] " {{ "}}}" }}

" vim:foldmethod=marker:foldlevel=0
